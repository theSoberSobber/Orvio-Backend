# TODO: persist data in postgres contianers 
# and redis how (okay maybe not redis)
services:
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 15s
      timeout: 10s
      retries: 10
    deploy:
      resources:
        limits:
          memory: 250M
          cpus: "0.35"

  postgres:
    image: postgres:13-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
    deploy:
      resources:
        limits:
          memory: 300M
          cpus: "0.30"

  redis:
    image: redis:alpine
    container_name: redis
    command: redis-server --databases 16
    ports:
      - "6379:6379"
    env_file:
      - .env
    volumes:
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 100M
          cpus: "0.15"

  auth-service:
    build:
      context: ./
      dockerfile: ./apps/auth/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      otp-service:
        condition: service_started
    env_file:
      - .env
    command: npm run start:dev auth
    deploy:
      resources:
        limits:
          memory: 200M
          cpus: "0.20"

  otp-service:
    build:
      context: ./
      dockerfile: ./apps/otp/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    command: npm run start:dev otp
    deploy:
      resources:
        limits:
          memory: 150M
          cpus: "0.15"

  fcm-token-service:
    build:
      context: ./
      dockerfile: ./apps/fcmToken/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    command: npm run start:dev fcmToken
    deploy:
      resources:
        limits:
          memory: 150M
          cpus: "0.15"

  fcm-service:
    build:
      context: ./
      dockerfile: ./apps/fcm/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    command: npm run start:dev fcm
    deploy:
      resources:
        limits:
          memory: 150M
          cpus: "0.15"

  service-service:
    build:
      context: ./
      dockerfile: ./apps/service/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      fcm-service:
        condition: service_started
      fcm-token-service:
        condition: service_started
    env_file:
      - .env
    command: npm run start:dev service
    deploy:
      resources:
        limits:
          memory: 200M
          cpus: "0.20"

  api-gateway:
    build:
      context: ./
      dockerfile: ./apps/backend/Dockerfile
    depends_on:
      - auth-service
      - service-service
    ports:
      - "3000:3000"
    env_file:
      - .env
    command: npm run start:dev backend
    deploy:
      resources:
        limits:
          memory: 200M
          cpus: "0.20"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
