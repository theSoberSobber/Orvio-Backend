# TODO: persist data in postgres contianers 
# and redis how (okay maybe not redis)
services:
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file:
      - .env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]

  redis:
    image: redis:6
    container_name: redis
    command: redis-server --databases 16
    ports:
      - "6379:6379"
    env_file:
      - .env
    volumes:
      - redis_data:/data

  auth-service:
    build:
      context: ./
      dockerfile: ./apps/auth/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    command: npm run start:dev auth

  otp-service:
    build:
      context: ./
      dockerfile: ./apps/otp/Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    command: npm run start:dev otp

  api-gateway:
    build:
      context: ./
      dockerfile: ./apps/backend/Dockerfile
    depends_on:
      - auth-service
      - otp-service
    ports:
      - "3000:3000"
    env_file:
      - .env
    command: npm run start:dev backend
  
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    ports:
      - "8080:80"
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
      
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local